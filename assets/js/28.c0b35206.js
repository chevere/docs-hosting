(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{343:function(t,a,s){"use strict";s.r(a);var e=s(25),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"immutability-standard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#immutability-standard"}},[t._v("#")]),t._v(" Immutability standard")]),t._v(" "),a("p",[t._v("Immutability in Chevere is the concept that an object, once created, cannot be modified throughout its lifetime. An immutable object can't change.")]),t._v(" "),a("p",[t._v("Although "),a("a",{attrs:{href:"https://wiki.php.net/rfc/immutability",target:"_blank",rel:"noopener noreferrer"}},[t._v("PHP doesn't support immutability"),a("OutboundLink")],1),t._v(", Chevere uses cloning and DeepCopy to provide pseudo-immutability, which for our use case achieves the same result as true immutability.")]),t._v(" "),a("h2",{attrs:{id:"php-objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#php-objects"}},[t._v("#")]),t._v(" PHP objects")]),t._v(" "),a("p",[t._v("In PHP, objects are passed by reference. For the code below, "),a("code",[t._v("$mutable")]),t._v(" is a reference to the object with id "),a("code",[t._v("#12345")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$mutable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("stdClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// id: #12345")]),t._v("\n")])])]),a("p",[t._v("In the code below, "),a("code",[t._v("$mutable")]),t._v(" changes from its original state, but its reference (object id) remains the same as the previous state "),a("code",[t._v("#12345")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$mutable")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("prop")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'value'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// id: #12345")]),t._v("\n")])])]),a("h3",{attrs:{id:"mutables-aren-t-safe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mutables-aren-t-safe"}},[t._v("#")]),t._v(" Mutables aren't safe")]),t._v(" "),a("p",[t._v("The problem with mutable objects is that the state of "),a("code",[t._v("$mutable")]),t._v(" is unknown to other code logic interacting with it. For other code units, it is not safe to rely on "),a("code",[t._v("$mutable")]),t._v(".")]),t._v(" "),a("p",[t._v("In the code below, "),a("code",[t._v("$mutable")]),t._v(" is passed to "),a("code",[t._v("Service")]),t._v(" as a dependency.")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$service")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Service")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$mutable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$mutable")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("prop")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'altered-value'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("Since "),a("code",[t._v("$mutable")]),t._v(" can change, "),a("code",[t._v("Service")]),t._v(" must account for the responsibility of observing "),a("code",[t._v("$mutable")]),t._v(" states, making your code more complex and error-prone.")]),t._v(" "),a("h2",{attrs:{id:"state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state"}},[t._v("#")]),t._v(" State")]),t._v(" "),a("p",[t._v("For our purposes, the immutability concept is all about dealing with object states, which are the characteristic values of a given object at a given time. States are different versions of an object.")]),t._v(" "),a("p",[t._v("Think about states as snapshots of an object at different times rather than one version of the object.")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$immutable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeImmutable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// id: #1313")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$immutableCopy")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$immutable")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("withProp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'altered-value'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// id: #1314")]),t._v("\n")])])]),a("p",[t._v("In the code above, "),a("code",[t._v("$immutableCopy")]),t._v(" is an altered copy (another state) of "),a("code",[t._v("$immutable")]),t._v(". The objects have different ids, making them safe for other code units.")]),t._v(" "),a("h2",{attrs:{id:"conventions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#conventions"}},[t._v("#")]),t._v(" Conventions")]),t._v(" "),a("p",[t._v("Immutable in Chevere refers to objects in which altering methods "),a("strong",[t._v("return an altered clone/copy")]),t._v(" of the original object.")]),t._v(" "),a("h3",{attrs:{id:"method-naming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#method-naming"}},[t._v("#")]),t._v(" Method naming")]),t._v(" "),a("h4",{attrs:{id:"withx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#withx"}},[t._v("#")]),t._v(" withX")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("with")]),t._v(" prefix "),a("strong",[t._v("must")]),t._v(" be used in methods that provide another object state.")]),t._v(" "),a("p",[t._v("In the example below, the "),a("code",[t._v("withString")]),t._v(" method sets the value of "),a("code",[t._v("$this->string")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("withString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword type-hint"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name return-type"}},[t._v("MyInterface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"withoutx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#withoutx"}},[t._v("#")]),t._v(" withoutX")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("without")]),t._v(" prefix "),a("strong",[t._v("must")]),t._v(" be used in methods that remove something from the object.")]),t._v(" "),a("p",[t._v("In the example below, the "),a("code",[t._v("withoutString")]),t._v(" method unsets "),a("code",[t._v("$this->string")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("withoutString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name return-type"}},[t._v("MyInterface")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"implementing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#implementing"}},[t._v("#")]),t._v(" Implementing")]),t._v(" "),a("h3",{attrs:{id:"cloning"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cloning"}},[t._v("#")]),t._v(" Cloning")]),t._v(" "),a("p",[t._v("Chevere uses "),a("a",{attrs:{href:"https://www.php.net/oop5.cloning",target:"_blank",rel:"noopener noreferrer"}},[t._v("object cloning"),a("OutboundLink")],1),t._v(" for pseudo-immutability. It is called that way because "),a("code",[t._v("clone")]),t._v(" creates a shallow copy.")]),t._v(" "),a("p",[t._v("💡 Using "),a("code",[t._v("clone")]),t._v(" doesn't work all the time as it doesn't account for nested object properties. For these cases, we recommend using "),a("a",{attrs:{href:"#deepcopy"}},[t._v("DeepCopy")]),t._v(".")]),t._v(" "),a("p",[t._v("In the next example, "),a("code",[t._v("$clone")]),t._v(" is assigned to the new cloned copy of "),a("code",[t._v("$immutable")]),t._v(", which has a different state and reference (object id).")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("MyImmutable")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword type-declaration"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'default'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("withString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword type-hint"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("self")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("clone")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$new")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token keyword type-declaration"}},[t._v("string")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword return-type"}},[t._v("string")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token keyword type-declaration"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$immutable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyImmutable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ref#1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$clone")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$immutable")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("withString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'val'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ref#2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$immutable")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token keyword type-declaration"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ref#1 default")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$clone")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token keyword type-declaration"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ref#2 val")]),t._v("\n")])])]),a("p",[t._v("As properties are protected/private by "),a("RouterLink",{attrs:{to:"/developer/spec/components.html#conventions"}},[t._v("convention")]),t._v(", the property "),a("code",[t._v("$string")]),t._v(" of "),a("code",[t._v("$immutable")]),t._v(" can't be altered in a public context without creating a new copy of the original object, which implies a new reference, thus ensuring immutability.")],1),t._v(" "),a("h3",{attrs:{id:"deepcopy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deepcopy"}},[t._v("#")]),t._v(" DeepCopy")]),t._v(" "),a("p",[t._v("Chevere uses "),a("a",{attrs:{href:"https://github.com/myclabs/DeepCopy",target:"_blank",rel:"noopener noreferrer"}},[t._v("DeepCopy"),a("OutboundLink")],1),t._v(" to provide deep copies of objects, which is needed when it is not possible to rely on cloning for immutability.")]),t._v(" "),a("p",[t._v("In the next example, the "),a("code",[t._v("map")]),t._v(" method provides public access to a deep copy of "),a("code",[t._v("$map")]),t._v(". This enables "),a("code",[t._v("MyImmutable")]),t._v(" to effectively provide read-only public access to "),a("code",[t._v("$map")]),t._v(".")]),t._v(" "),a("div",{staticClass:"language-php extra-class"},[a("pre",{pre:!0,attrs:{class:"language-php"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token package"}},[t._v("DeepCopy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("deep_copy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token package"}},[t._v("Ds"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("MyImmutable")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name type-declaration"}},[t._v("Map")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("__construct")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("map")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name return-type"}},[t._v("Map")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("deep_copy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),a("span",{pre:!0,attrs:{class:"token property"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("In the example above, any manipulation on the return of "),a("code",[t._v("map")]),t._v(" won't affect the original object.")])])}),[],!1,null,null,null);a.default=n.exports}}]);